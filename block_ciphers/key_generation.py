import os
from Crypto.Hash import SHA256
from Crypto.PublicKey import RSA
from Crypto.Random import get_random_bytes

def aes_key_generation(byte_length: int) -> bytes:
    # confirm that a 128, 192, or 256 bit key is being requested
    if byte_length != 16 and byte_length != 24 and byte_length != 32:
        return "can only compute a 16, 24, or 32 byte key"
    
    # hash the random generated bytes to be the key and then return the hashed data
    hash_object = SHA256.new(data=get_random_bytes(byte_length))
    key = hash_object.digest()
    return key


def generate_rsa_keys(file_location="."):
    try:
        key = RSA.generate(2048)

        private_key = key.export_key(pkcs=8,
                                protection="scryptAndAES128-CBC")
        
        public_key = key.publickey().export_key()
        
        with open(os.path.join(file_location, "private.pem"), "wb") as file_out:
            file_out.write(private_key)

        with open(os.path.join(file_location, "public.pem"), "wb") as file_out:
            file_out.write(public_key)
        return "RSA keys made"

    except:
        return "Error making RSA keys"
